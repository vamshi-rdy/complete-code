# Step-by-Step Canary Deployment Guide
# 1. Prepare Your Cluster & Namespace
#    a. Create a dedicated namespace for isolation and resource management      
#        . kubectl create namespace production

# As noted by a fellow engineer:
# “Namespace Like Your Life Depends on It… Use namespaces for organization and isolation.”

# 2. Deploy the Stable Version
#    a. Deploy your current release (e.g., nginx:stable) with labels for identification:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-stable
  namespace: production
  labels:
    app: nginx
    version: stable
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
      version: stable
  template:
    metadata:
      labels:
        app: nginx
        version: stable
    spec:
      containers:
      - name: nginx
        image: nginx:stable
        ports:
        - containerPort: 80

3. Deploy the Canary Version
   a. Introduce a small subset of the new version:
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-canary
  namespace: production
  labels:
    app: nginx
    version: canary
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
      version: canary
  template:
    metadata:
      labels:
        app: nginx
        version: canary
    spec:
      containers:
      - name: nginx
        image: nginx:canary
        ports:
        - containerPort: 80

4. Traffic Splitting via Service
   a. Use a common Service to balance traffic by replica count:

kind: Service
metadata:
  name: nginx-service
  namespace: production
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80

# Traffic will be distributed proportionally based on pod counts.

# 5. Monitor & Validate
#   Set up monitoring with tools like Prometheus and Grafana to track health and metrics. Key canary validation best practices:

#     a. Define clear success criteria (error rates, latency, resource consumption) before rollout.

#     b. Start with a small subset, monitor carefully, and expand only when safe

# 6. Decision Point: Rollforward or Rollback
#    a. If metrics look good, scale canary up and phase out stable version.

#    b. If issues arise, scale down or delete the canary deployment.

#    c. Automate this step where possible (e.g., with CI/CD tools or Argo Rollouts).


# 7. Advanced Traffic Control Options
# For greater control, use tools like:

# Istio (with VirtualService and DestinationRule) 

# NGINX Ingress (with canary annotations):

#   nginx.ingress.kubernetes.io/canary: "true"
#   nginx.ingress.kubernetes.io/canary-weight: "20"

# Security Best Practices to Hard-Enable Your Workflow
# 1. Least Privilege & RBAC: Ensure pods and users only have required permissions. 
# 2. Network Policies: Enforce strict rules for pod-to-pod communication. 
# 3. Secure Image Practices:

    # Use minimal, trusted base images.

    # Regularly scan images for vulnerabilities (e.g., with Trivy). 

# 4. Seccomp/AppArmor: Enable runtime restrictions to reduce container attack surfaces. 

# 5. Secrets Management:

# Avoid environment variables or plaintext stores.

# Use tools like Vault, External Secrets, or sealed secrets.
# A user noted:

# “External Secrets operator … pull the secrets from vault.” 


# 6. Pod Security Policies (or their successors like Pod Security Admission): Enforce restrictions on privilege escalation. 
# 7. Policy-as-Code Pre-Deployment: Use tools like Monokle to validate manifests before they land in the cluster  
